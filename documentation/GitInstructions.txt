Bruno Strandberg 2018 -- minor additions/changes by hgrie Aug 2020

This is a short manual to get everyone started with Git version control. There
is a lot one can do with Git - the idea of this document is to help with the
very basics. Everything else comes later with the help of Google. A list of
rules and popular/useful commands is provided in the beginning, below are the
instructions for getting started and a work flow example. 

FIRST TIME USERS move down to start from "SOFTWARE SET-UP", then continue with
"GETTING THE REPO" and "WORK FLOW" 

IMPORTANT RULES------------------------------------------------------------------
----------------------------------------------------------------------------------------------

1. DO NOT EDIT/MODIFY THE SHARED DROPBOX FOLDER MANUALLY! This is a git
repository, so everything should be done through git commands. Manually
adding/deleting files from that repo could mess thing up. 

2. DO NOT TRACK BINARY FILES (executables and .o files)! Git does not compare
them and this will clog up the git history, the feedback you receive through
terminal etc. 
All you should track is the source code and important files in text-format
(e.g. wavefunctions, input.dat templates, shell scripts). Everything that is
created by Make should not be tracked. The files that are excluded centrally
(i.e. they are excluded from all clone's of the central repo) are defined in
.gitignore. If there is a directory/file that you wish to exclude only locally
use the file .git/info/exclude 

3. BEFORE YOU COMMUNICATE WITH SERVER THROUGH GIT (<git fetch>, <git pull>,
<git clone> etc commands) MAKE SURE DROPBOX IS SYNCHRONIZED! 

SOME USEFUL COMMANDS-------------------------------------------------------
----------------------------------------------------------------------------------------------
<git status> - status of your project

<git add /path-to-file/filename> - add this file to be tracked/committed next
time you run git commit 
<git commit> - commit your work to your local working directory

<git push --all> - push your work to server. If it rejects, you can try
<git push --all --force>

If you need to specify where to push (usually automatic), run
<git remote> -  to see the name of the remote server. Then run
<git push --all --force *name-of-remote*>

<git log> - see the log file. More convenient is to use some sort of
interface, e.g. on linux <gitk --all> 

<git branch> - see what branch you are on (the starred one indicates the branch)
<git branch *branch name*> - create new branch
<git checkout *branch-name*> - to switch between branches
<git branch -d *branch name*> - delete branch

<git fetch> - download everything from server. If this complains, run
<git remote> - to see the name of the remote server. Then run
<git fetch *name-of-remote*> - to download everything from server
<git rebase origin/master>	Rebase your work on what you fetched from
origin. This command updates your master branch with what you got from server 

Your rebase might have merge conflicts. Then you need to run
<git mergetool> - This will ask which mergetool you wish to use. Hit enter to
pop up "Meld" (that's my default, anyway). The middle one is the one to edit
to merge manually. See
http://stackoverflow.com/questions/11133290/git-merging-using-meld 

<git tag -a *version*> - this specifies a tag in the repository. You can see the list of tags from
<git tag>

Tags are great for versioning and tagging down versions that are checked to
work. Basically you can export any commit from history at any time, but with a
tag it's extremely easy. To export a version with a tag name "v1.0" to
directory ~/TEST.tar just run 
<git archive -o ~/TEST.tar v1.0> 

I propose we use tag in format "vX.Y" only for code that compiles and is
checked to produce valid results. Anything else one can tag with different
names, e.g. BrunoDevCheck1 or whatever. 

<git rm *filename*> - delete a tracked file from repository. If you just run
<rm *filename*> from your terminal, if the file is part of the repo (i.e. it
is tracked) it will come back next time you fetch. 

<git difftool 30474e65:twobody/input.template.dat
28f495a1:twobody/input.template.dat> - this is an example command how to diff
two files from any two commits. The "arbitrary" numbers are parts of the SHA1
codes of the two commits. One does not need the whole SHA1 code but just
enough for git to pin down which commit one is referring to. One can see the
SHA1 codes of the commits in gitk or <git log>. 

ADDENDUM hgrie Aug 2020:

Two excellent GUIs for git:

git-cola : I use it to create and amend commits. Eaasilty shows changes
between files etc, nice editor for commenting on version.

gitk : more focused on version history: shows nice timeline of commits and
available branches. I use it not for commutting.amending but for version history.

SOFTWARE SET-UP--------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

1. Install git. This depends on your operating system, for my Fedora18 I just ran
<yum install git>

2. Install some sort of interface program, e.g. on my linux I have gitk. This
is not a necessity for git to run, but it provides a nice user interface, I
highly recommend it. Daniel installed gitx for his mac machine, seems to do
the job 

3. If you do not have dropbox, install dropbox. This is necessary for the
specific way our central repo is set up. 

3.1 If you do not have an account, go to www.dropbox.com to get one.

3.2 If you have an account but have not installed the client on your machine,
install the client. 
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
INSTRUCTIONS FOR LINUX         $$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

hgrie Aug 2020: as far as I can tell, dropbox is now just a .rpm/.deb lpackage
in the repository, so the following is not necessary and let only for
historical reasons.

For Linux !64 BIT! users run these command under your user, NOT ROOT:
<cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf ->
<~/.dropbox-dist/dropboxd>

If this does not work (or you have 32bit machine etc) see
https://www.dropbox.com/install?os=lnx 

A successful install will end with you having a directory Dropbox on your
machine (usually in your home directory) that is kept in sync with the cloud. 

Once you have Dropbox successfully installed, there are a few other things you
might wish to set up. You can get a python script for dropbox management from 

http://www.dropboxwiki.com/tips-and-tricks/using-the-official-dropbox-command-line-interface-cli 

For example I added the following aliases to my .bashrc. The second one uses
the python script to tell me if dropbox daemon is running. If it is not
running, I can initiate it with the first alias. 

#Run the dropbox daemon to synchronize
alias dropboxDaemon='~/.dropbox-dist/./dropboxd &'
#Get the status of dropbox
alias dropboxStatus='~/./dropbox.py status'

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
END OF LINUX-SPECIFIC INSTRUCTIONS         $$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

GETTING THE REPO------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

By this step you should have git and gitk installed on your computer and you
should have a Dropbox folder in your home directory that is kept in sync with
the cloud. If all this is true, contact Bruno on
b.strandberg.1@research.gla.ac.uk or bruno.strandberg@gmail.com, so that I can
share the Dropbox folder to you that hosts our repository. I will need to know
your e-mail address that is associated with your Dropbox account. 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
THE MOST IMPORTANT RULE!

DO NOT EDIT THE SHARED DROPBOX FOLDER MANUALLY! This is a git repository, so everything should be done through git.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

If sharing the folder has worked successfully, then you should see a directory
Dropbox/3HeCompt (or maybe Dropbox/repos/3HeCompt) in your dropbox folder. 

1. Go to the directory where you wish to keep the 3He compton scattering code,
e.g. /home/bruno/Code/ . Now run 
<git clone /my-dropbox-dir/Dropbox/repos/3HeCompt/> - I am not sure if Dropbox
shares /repos/3HeCompt/ or just Dropbox/3HeCompt/, make sure the path is
correct. 
This will clone the repository into that directory, you should now see a folder e.g.
</home/bruno/Code/3HeCompt/>. This is your working directory! 

2. Go inside your working directory 3HeCompt, run the command
<gitk --all>
If you do not have an interface installed, you can instead run
<git log>
This will show you the history of the project. Having an interface for that is convenient, I recommend installing one.

WORK FLOW-------------------------------------------------------------------------
------------------------------------------------------------------------------------------- 
0. Make sure Dropbox is synced!

1. Make sure your repository is up to date. For that run
<git fetch origin> - this will download all (but WILL NOT AUTOMATICALLY MERGE)
the updates from our Dropbox repository to your working directory. 

2. If there are updates from git fetch, you should rebase your work on top of
what you got from the repo. Run 
<git rebase origin/master> - this will do an automatic merge, so that you end
up with an up-to-date working directory. If there are conflicts that need
manual merging, then you will need to do that. Be patient, read what git tells
you, use google and it will work. 
<git mergetool> - start the tool to conduct manual merging

3. You now have an up-to-date working directory. Now you wish to implement
ingenious improvements. The first thing to do is create a branch. A very nice
intro to branches is on 

http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging

Create a branch by:
<git branch IngeniousImprovements>

See the branches you have
<git branch> the starred one is the one you are currently working in.

Change from branch Master to branch IngeniousImprovements
<git checkout IngeniousImprovements>

4. You are now in your development branch IngeniousImprovements, start editing
files. Once you have done some work, you should commit your work. See the
status by 

<git status> - This will show you "untracked files", "modified" files and
"changes to be committed" files. Everything you wish git to remember should be
in "changes to be committed", add the untracked and modified by 
<git add file1 file2> - moves files to "changes to be committed". You are now
ready to commit! 

(Before that you might wish to run
<git config --global core.editor emacs> - this sets the default git editor
from Vi to Emacs) 

Run
<git commit> - this is the very essence of git. This will record all the
changes that you have made since your last commit. It will pop up an editor
where you should write a short comment on which changes you have made. It will
log the coding changes and other essential stuff automatically. 

5. So let's say you are now happy with what you have in
IngeniousImprovements. Go back to your master branch  
<git checkout master>
This is the point where branching comes in handy. Before you merge your branch
to master you probably wish to up-date your working directory from the server,
run 
<git fetch origin>. If it says it's up-to-date then it's fine, if it is not then run
<git rebase origin/master> - this now means that your master branch is
up-to-date. If you now merge your development branch it means that you are
automatically comparing to the most up-to-date version. Run 
<git merge IngeniousDevelopments> - again, good chance is it manages to merge
automatically. If there are conflicts, then you will need to merge manually. 

6. Once your branch has been merged to master, delete the Branch
<git branch -d IngeniousDevelopments>

7. Push your work to remote repository
<git push --all origin>

Another good thing about branching is that your branch does not conflict with
others during development. During work process you can always go back to
master, fetch and rebase the master branch and then push your work to the
repo. Always just make sure on which branch you are working on by running 
<git branch> to check branch and
<git checkout *branch-name*> to switch branch

SOME MATERIAL (THAT NO ONE EVER READS)---------------------------
---------------------------------------------------------------------------------------------
The title is wrong. Daniel read it, it is useful.

1. "What is Git" - a one page summary
http://git-scm.com/book/en/Getting-Started-Git-Basics

2. Generally everything from git-scm is really informative. A bit more
extended intro 
http://git-scm.com/book/en/Git-Basics-Getting-a-Git-Repository

3. Intro to branches
http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ADDENDUM hgrie Feb 2017, based on conversation with Daniel and Bruno

The procedure above does only make the MASTER branch repo-accessible. That
means that others CANNOT see your "personal" branch, like
* IngeneousImprovements.

==== This should be done with GREAT CARE, and only AFTER the branch-owner has
confirmed that it's ok. ====

To get access to someone else's "personal" branch, proceed as follows:

(1) > git fetch origin [i.e. NOT git fetch origin/master!!!]

tells you that there is a new remote branch.

(2) git checkout <branchname>

checks out that branch.

(3) git rebase origin/<branchname>

will finally allow you to access the branch locally and make changes.

==== This should be done with GREAT CARE, and only AFTER the branch-owner has
confirmed that it's ok. ==== 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ADDENDUM hgrie Sep 2017

eliminating unwanted file from repository, so that any trace of them are gone,
even in history:

https://help.github.com/articles/removing-sensitive-data-from-a-repository/

Steps given there:

git clone /the/dropbox/repo

cd <that cloned repo>

Run the following command, replacing PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA with the path to the file you want to remove, not just its filename. These arguments will:

    Force Git to process, but not check out, the entire history of every branch and tag
    Remove the specified file, as well as any empty commits generated as a result
    Overwrite your existing tags

git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA' --prune-empty --tag-name-filter cat -- --all

here, PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA can also contain wildcarts, like
*WRONG* (or "*WRONG*"?)

Add your file with sensitive data to .gitignore to ensure that you don't
accidentally commit it again.

Double-check that you've removed everything you wanted to from your
repository's history, and that all of your branches are checked out.

Once you're happy with the state of your repository, force-push your local
changes to overwrite your GitHub repository, as well as all the branches
you've pushed up:

git push origin --force --all

In order to remove the sensitive file from your tagged releases, you'll also
need to force-push against your Git tags:

git push origin --force --tags

After you're confident that git filter-branch had no unintended side effects,
you can force all objects in your local repository to be dereferenced and
garbage collected with the following commands (using Git 1.8.5 or newer):

git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin

git reflog expire --expire=now --all

git gc --prune=now

and then replace the old repo in dropbox -- git push?

There is also the BFG repo-cleaner app at
https://rtyley.github.io/bfg-repo-cleaner/ .

I did not use it to manipulate the repo. But it offers also searches for file
sizes etc. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ADDENDUM hgrie Aug 2020

How to get an existing repository into Dropbox

(from https://stackoverflow.com/questions/1960799/using-git-and-dropbox-together-effectively)

(1) If not already done, create new folder in Dropbox

(2) Initialise repo as subfolder with name (here "mydemo.git")

> git init --bare demo

(3) Go to project folder you want to get into Dropbox

(4) If not already done, create new folder for project

(5) Go to folder (here named "demo")

(6) Set up reporsitory -- you need to do this even when you already have a
git-repo in the directory. This will not overwrite anything, just
re--intialise it.

> git int

(7) Set up shortcut to Dropbox -- can/should be done NOT inside teh folder
demo/ but one level above

> git remote add origin ~/<Dropbox-location>/mydemo.git

(8) add files, make first commit

> git add --all (also doable via GUI!)

and git-commit, e.g. via git-cola or command line

(9) push changes to Dropbox repo

> git push -u origin master

(10) before making a push, every ither time, you need to do a pull:

> git pull origin master

NOTE: ******DO NOT AMEND A CIMMIT AFTER YOU HAVE DONE THE PUSH!!!!!******* 
If you do, it screws up the history. Just do not do it. 
